M = mongoDB é uma nova ideia de banco de dados trazendo conceitos de Banco de Dados Orientado a Documentos.NoSQL,NoREL não fornecem 
relacionamentos entre documentos.os bancos de dados de documentos integram esses dados ao próprio documento,é possível armazenar dados
relacionados de forma separada.

E = Express O Express.js é um dos frameworks mais utilizados do Node.js

A = Angular.js O AngularJS é um framework open-source de desenvolvimento front-end que possibilita o desenvolvimento de aplicações web, 
com foco em simplificar tanto a codificação quanto o processo de teste. Além disso, é possível integrá-lo com bibliotecas famosas como 
o Bootstrap, D3.js e o Apache Cordova (ou PhoneGap), ajudando a acelerar esse tipo de codificação como nunca antes tivemos.
O AngularJS também permite aos desenvolvedores web fazer uso da linguagem de marcação HTML.


N = Node.js o Node.js é um ambiente de execução para JavaScript, assíncrono e orientado a eventos de código aberto. O Node.js permite 
que os desenvolvedores usem JavaScript para escrever scripts do lado do servidor. O Node.js usa um modelo de I/O direcionada a evento 
não bloqueante que o torna leve e eficiente, ideal para aplicações em tempo real com troca intensa de dados através de dispositivos
distribuídos.

FULL stack solution Em computação, um conjunto de soluções, também conhecido como pilha de soluções ou pilha de software é um
conjunto de subsistemas ou componentes de software necessários para criar uma plataforma completa, de modo que nenhum software
adicional seja necessário para suportar os aplicativos.

Liten >> é qual a porta ele vai acessar 
"/" > é quando vai acessar a url
app> é express
.get > quer dizer que ele vai acessar 
req. é a requisição 
res. é a resposta 

//exemplo:

const express = require("express"); //aqui estamos instanciando as constantes//
const app = express(); //aqui estamos instanciando as constantes//
const path = require('path'); //aqui estamos instanciando as constantes//
const router = express.Router(); //aqui estamos instanciando as constantes//
__diname = path.resolve(); //aqui estamos instanciando as constantes para resolver questões de encapsulamento//

app.get('/',(req,res) =>{    //aqui estamos colocando a barra para demonstrar que será pego um link do navegador//
res.send('Hello World!'     //aqui estamos usando o res.send para escrever na tela o que eu quero//
})

app.listen(process.env.port || 3000); //onde colocamos em qual porta do servidor vamos deixar essa aplicação, a porta mais usada é a 8080)

console.log('Running at Port 3000'); //aparece no -console-CMD para ter rastreabilidade no código//


//bodyParsey > vamos acessar a body como se o body estivesse encapsulada e por meio desse ele desencapsula

//Novo código para que possamos ao inves de só escrever com o res.send, possamos usar o comando para renderizar a página html com o ejs que faz com que possamos manipular variáveis no html 

const express = require("express");
const app = express();
const path = require('path');
const router = express.Router();
__diname = path.resolve();

var bodyParser = require('body-parser'); //o comando bodyperser que nós pedimos para instalar é um desencapsulador da tag body 
app.user(bodyParser.urlencoded({ extended: false }))

app.engine('html', require('ejs').renderFile);//quer dizer quwe o html será renderizado ele lê o arquivo html e usa o ejs que foi um pacote que instalamos)

app.get('/',(req,res) =>{     //pode ser usado ao inves de => o comando de function que é a mesma coisa
  res.render(__diname+'/views/home.html'); //render renderiza a página, quer dizer que ele vai olhar a pasta views//
})

app.listen(process.env.port || 3000); //novamente a porta que iremos utilizar o comando app.listen para//

console.log('Running at Port 3000');
